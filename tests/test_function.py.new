# filepath: f:\Git\azure-ai-vision-agent-floorplans\tests\test_function.py
import pytest
import azure.functions as func
import azure.durable_functions as df
import json
import base64
from unittest.mock import MagicMock, patch, AsyncMock
import os
import sys
from PIL import Image
import io
import logging
from msrest.authentication import ApiKeyCredentials
import openai

from function_app import myApp

@pytest.fixture(scope="module")
def azure_functions_app():
    return myApp

@pytest.mark.asyncio
async def test_http_start(use_azure_functions_test_env, azure_functions_app):
    """Test HTTP-triggered function start"""
    # Create a mock request
    mock_req = MagicMock()
    mock_req.get_body.return_value = json.dumps({
        "container": "test-container",
        "filename": "test.png",
        "reference_filename": "reference.png",
        "analyze_prompt": "Test prompt"
    }).encode('utf-8')
    mock_req.route_params = {"functionName": "vision_agent_orchestrator"}

    # Create a mock durable client
    mock_client = MagicMock()
    mock_client.start_new = AsyncMock(return_value="test-instance-id")
    mock_client.create_check_status_response.return_value = func.HttpResponse(
        body=json.dumps({
            "id": "test-instance-id",
            "statusQueryGetUri": "https://test-status-url"
        }),
        status_code=202,
        headers={"Content-Type": "application/json"}
    )

    # Get the function from the durable app
    http_start_func = next(f for f in azure_functions_app._functions if f.name == "http_start")
    
    # Test http_start function
    result = await http_start_func.function(mock_req, client=mock_client)
    assert result.status_code == 202
    mock_client.start_new.assert_called_once()

def test_read_image(use_azure_functions_test_env, azure_functions_app):
    """Test image reading from blob storage"""
    # Create test image data
    test_image = Image.new('RGB', (100, 100), color = 'red')
    img_io = io.BytesIO()
    test_image.save(img_io, format='PNG')
    img_bytes = img_io.getvalue()

    # Mock BlobServiceClient and its methods
    mock_blob_client = MagicMock()
    mock_blob_client.download_blob().readall.return_value = img_bytes

    mock_blob_service = MagicMock()
    mock_blob_service.get_blob_client.return_value = mock_blob_client

    with patch('azure.storage.blob.BlobServiceClient.from_connection_string') as mock_blob_service_client, \
         patch.dict(os.environ, {'BLOB_CONNECTION_STRING': 'test-conn-str'}):
        mock_blob_service_client.return_value = mock_blob_service
        
        # Get the function from the durable app
        read_image_func = next(f for f in azure_functions_app._functions if f.name == "read_image")
        
        # Test read_image function
        result = read_image_func.function(json.dumps({
            "container": "test-container",
            "filename": "test.png"
        }))
        
        # Verify result is base64 encoded image
        assert isinstance(result, str)
        decoded = base64.b64decode(result)
        assert len(decoded) > 0

@patch('msrest.authentication.ApiKeyCredentials')
def test_object_detection(mock_credentials_class, use_azure_functions_test_env, azure_functions_app):
    """Test Custom Vision object detection"""
    # Create a test image
    test_image = Image.new('RGB', (100, 100), color = 'red')
    img_io = io.BytesIO()
    test_image.save(img_io, format='PNG')
    img_base64 = base64.b64encode(img_io.getvalue()).decode('utf-8')

    # Mock CustomVisionPredictionClient response
    mock_bbox = MagicMock()
    mock_bbox.left = 0.1
    mock_bbox.top = 0.1
    mock_bbox.width = 0.2
    mock_bbox.height = 0.2

    mock_prediction = MagicMock()
    mock_prediction.tag_name = "door"
    mock_prediction.probability = 0.95
    mock_prediction.bounding_box = mock_bbox

    mock_result = MagicMock()
    mock_result.predictions = [mock_prediction]

    # Mock the CustomVisionPredictionClient
    mock_predictor = MagicMock()
    mock_predictor.detect_image.return_value = mock_result

    # Set up the mock credentials
    mock_credentials = MagicMock()
    mock_credentials_class.return_value = mock_credentials

    with patch('azure.cognitiveservices.vision.customvision.prediction.CustomVisionPredictionClient', 
              return_value=mock_predictor), \
         patch.dict(os.environ, {
            'CV_ENDPOINT': 'https://test-endpoint',
            'CV_KEY': 'test-key',
            'CV_PROJECT_ID': 'test-project',
            'CV_MODEL_NAME': 'test-model'
         }):
        # Get the function from the durable app
        object_detection_func = next(f for f in azure_functions_app._functions if f.name == "object_detection")
        
        # Test object_detection function
        result = object_detection_func.function(json.dumps({
            "image_data": img_base64
        }))
        
        # Verify the result
        assert isinstance(result, list)
        assert len(result) == 1
        prediction = json.loads(result[0])
        assert prediction["tag"] == "door"
        assert prediction["probability"] == 0.95
        assert prediction["bounding_box"]["left"] == 0.1

@patch('openai.AzureOpenAI')
def test_summarize_results(mock_openai_class, use_azure_functions_test_env, azure_functions_app):
    """Test OpenAI result summarization"""
    test_payload = {
        "object_results": [
            {
                "tag": "door",
                "probability": 0.95,
                "model_response": "DOOR"
            }
        ],
        "analyze_prompt": "Analyze this floorplan"
    }

    # Mock OpenAI response structure
    mock_message = MagicMock()
    mock_message.content = "Test summary"

    mock_choice = MagicMock()
    mock_choice.message = mock_message

    mock_response = MagicMock()
    mock_response.choices = [mock_choice]

    # Mock OpenAI client with proper structure
    mock_client = MagicMock()
    mock_client.chat = MagicMock()
    mock_client.chat.completions = MagicMock()
    mock_client.chat.completions.create = MagicMock(return_value=mock_response)

    # Set up the mock class
    mock_openai_class.return_value = mock_client

    with patch.dict(os.environ, {
            'OPENAI_ENDPOINT': 'https://test-endpoint',
            'OPENAI_KEY': 'test-key',
            'OPENAI_MODEL': 'test-model'
         }):
        # Get the function from the durable app
        summarize_func = next(f for f in azure_functions_app._functions if f.name == "summarize_results")
        
        # Test summarize_results function
        result = summarize_func.function(json.dumps(test_payload))
        
        # Verify the result
        assert result == "Test summary"

        # Verify the Azure OpenAI client was initialized correctly
        mock_openai_class.assert_called_once_with(
            azure_endpoint='https://test-endpoint',
            api_key='test-key',
            api_version='2024-02-01'
        )
